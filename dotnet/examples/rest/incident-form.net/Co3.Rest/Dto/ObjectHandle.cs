/*
 * Resilient Systems, Inc. ("Resilient") is willing to license software
 * or access to software to the company or entity that will be using or
 * accessing the software and documentation and that you represent as
 * an employee or authorized agent ("you" or "your") only on the condition
 * that you accept all of the terms of this license agreement.
 *
 * The software and documentation within Resilient's Development Kit are
 * copyrighted by and contain confidential information of Resilient. By
 * accessing and/or using this software and documentation, you agree that
 * while you may make derivative works of them, you:
 *
 * 1)  will not use the software and documentation or any derivative
 *     works for anything but your internal business purposes in
 *     conjunction your licensed used of Resilient's software, nor
 * 2)  provide or disclose the software and documentation or any
 *     derivative works to any third party.
 *
 * THIS SOFTWARE AND DOCUMENTATION IS PROVIDED "AS IS" AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL RESILIENT BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// <auto-generated>
// IBM Resilient REST API version 28.1
//
// Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
// </auto-generated>

using System;
using System.Collections.Generic;
using Newtonsoft.Json;

namespace Co3.Rest.Dto
{
    /// <summary>
    ///  A handle to an object in the REST API.  The handle can be an object ID (integer)
    ///  or an object name (string).  The server will recognize the type and lookup the
    ///  object.
    /// 
    ///  <p>For example, the incidentDTO&apos;s resolution_id field can be specified as
    ///  the name of the resolution selection (e.g. "Duplicate") or with it's ID value
    ///  (which you have to lookup separately).</p>
    /// 
    ///  <p>Note that data is returned from the server with the ID values by default.
    ///  If you wish to receive name values back for objectHandle fields from the server instead, you
    ///  can set handle_format=names either in a query string (e.g. https://resilient.mycompany.com/rest/orgs/:orgId/incidents?handle_format=names)
    ///  or in an HTTP header.  For a description of the possible values of the handle_format query
    ///  string parameter/HTTP header, see <a href="json_ObjectHandleFormat.html">objectHandleFormat</a>.</p>
    /// 
    ///  <p>When setting ObjectHandle values the server will work with either format.  You only
    ///  need to indicate what type of output you want.  Versions of the Resilient Systems server
    ///  prior to v23 only accepted ID values and would convert string values ("55") to integers
    ///  where possible.  As of v23, the server will not automatically convert strings to their
    ///  number equivalent.  So if your API program used to send "55" assuming that the server
    ///  would convert it to 55, you will either have to change your program to send the integer
    ///  or you can work around the problem by setting handle_format=ids, which will again allow
    ///  the conversion to happen.</p>
    /// </summary>
    [JsonObject(MemberSerialization.OptIn)]
    public class ObjectHandle 
    {
        /// <summary>
        /// Gets the ID referred to by this object (generally an integer value).  This can be null in cases
        /// where you know the name, but not the ID.
        /// </summary>
        [JsonProperty("id")]
        public object Id { get; set; }

        /// <summary>
        /// Gets the name referred to by this object.  This can be null in cases where you know
        /// the ID but not the name.
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }
    }
}
