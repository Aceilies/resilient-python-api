/*
 * Resilient Systems, Inc. ("Resilient") is willing to license software
 * or access to software to the company or entity that will be using or
 * accessing the software and documentation and that you represent as
 * an employee or authorized agent ("you" or "your") only on the condition
 * that you accept all of the terms of this license agreement.
 *
 * The software and documentation within Resilient's Development Kit are
 * copyrighted by and contain confidential information of Resilient. By
 * accessing and/or using this software and documentation, you agree that
 * while you may make derivative works of them, you:
 *
 * 1)  will not use the software and documentation or any derivative
 *     works for anything but your internal business purposes in
 *     conjunction your licensed used of Resilient's software, nor
 * 2)  provide or disclose the software and documentation or any
 *     derivative works to any third party.
 *
 * THIS SOFTWARE AND DOCUMENTATION IS PROVIDED "AS IS" AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL RESILIENT BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// <auto-generated>
// Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
// </auto-generated>

using System;
using System.Collections.Generic;
using Newtonsoft.Json;

namespace Co3.Rest.Dto
{
    /// <summary>
    ///  Holds information about an action.
    /// </summary>
    [JsonObject(MemberSerialization.OptIn)]
    public class ActionDto : PartialActionDto
    {
        /// <summary>
        /// The type of object to which this action applies (e.g. incident, task, etc.).  See <a href="json_ActionsFrameworkInfoDTO.html#reslink_action_object_types">actionsFrameworkInfoDTO
        /// (action_object_types property)</a> for the list of possible values.
        /// </summary>
        [JsonProperty("object_type")]
        public ObjectHandle ObjectType { get; set; }

        /// <summary>
        /// The conditions that trigger this action.  For manual actions, these conditions control when the user will see
        /// the action in the UI.  For automatic actions, these conditions control when the action gets automatically
        /// fired.
        /// </summary>
        [JsonProperty("conditions")]
        public List<ConditionDto> Conditions { get; set; }

        /// <summary>
        /// The list of message destination IDs for this action.  See <a href="resource_MessageDestinationREST.html">MessageDestinationREST</a>.
        /// </summary>
        [JsonProperty("message_destinations")]
        public List<ObjectHandle> Destinations { get; set; }


        /// <summary>
        /// The maximum amount of time in seconds that can elapse before this action
        /// has been considered to be timed out. A value of null indicates that the
        /// action should use the default timeout (currently 1 day).
        /// </summary>
        [JsonProperty("timeout_seconds")]
        public int TimeoutSeconds { get; set; }

        /// <summary>
        /// A unique identifier for this Custom Action.
        /// </summary>
        [JsonProperty("uuid")]
        public string Uuid { get; set; }

        /// <summary>
        /// This value is used for export/import to uniquely represent this field
        /// </summary>
        [JsonProperty("export_key")]
        public string ExportKey { get; set; }

        /// <summary>
        /// A list of logic types to apply to the conditions. The following are examples:
        /// <ul>
        /// <li>all</li>
        /// <li>any</li>
        /// <li>advanced</li>
        /// </ul>
        /// <br/>
        /// </summary>
        [JsonProperty("logic_type")]
        public string LogicType { get; set; }

        /// <summary>
        /// The automations run when the conditions for this action are met. They are run in the order of the list.
        /// </summary>
        [JsonProperty("automations")]
        public List<AutomationDefinitionDto> Automations { get; set; }

        /// <summary>
        /// The custom evaluation string to be used with logic_type = advanced.
        /// Ex: "(1 AND 2) OR 3"
        /// This field must be passed when logic_type advanced is used,
        /// and will be ignored and deleted for both other logic types.
        /// </summary>
        [JsonProperty("custom_condition")]
        public string CustomCondition { get; set; }
    }
}
