/*
 * Resilient Systems, Inc. ("Resilient") is willing to license software
 * or access to software to the company or entity that will be using or
 * accessing the software and documentation and that you represent as
 * an employee or authorized agent ("you" or "your") only on the condition
 * that you accept all of the terms of this license agreement.
 *
 * The software and documentation within Resilient's Development Kit are
 * copyrighted by and contain confidential information of Resilient. By
 * accessing and/or using this software and documentation, you agree that
 * while you may make derivative works of them, you:
 *
 * 1)  will not use the software and documentation or any derivative
 *     works for anything but your internal business purposes in
 *     conjunction your licensed used of Resilient's software, nor
 * 2)  provide or disclose the software and documentation or any
 *     derivative works to any third party.
 *
 * THIS SOFTWARE AND DOCUMENTATION IS PROVIDED "AS IS" AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL RESILIENT BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// <auto-generated>
// Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
// </auto-generated>

using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Co3.Rest.Dto
{
    [DataContract]
    [JsonConverter(typeof(StringEnumConverter))]
    public enum MethodName
    {
        /// <summary>
        /// Unspecified enum value.
        /// </summary>
        [JsonIgnore]
        Undefined,

        /// <summary>
        /// <pre>
        ///  {"field_name": "name", "method_name": "changed"}
        ///  </pre>
        /// 
        /// Evaluates to true if the field named "name" has changed.
        /// </summary>
        [EnumMember(Value = "changed")]
        Changed,

        /// <summary>
        /// <pre>
        ///  {"field_name": "name", "method_name": "equals", "value": "some value"}
        ///  </pre>
        /// 
        /// The above evaluates to true if the field named "name" has a value (case insensitive) of "some value".
        /// This method also works for other type of fields (besides text).  For example, you can use
        /// it for select lists:
        /// 
        /// <pre>
        ///  {"field_name": "exposure_type_id", "method_name": "equals", "value": 5}
        ///  </pre>
        /// 
        /// The above evaluates to true if the field named "exposure_type_id" has a value whos ID is 5.
        /// 
        /// <p>
        /// If the field is an "textarea" field configured for rich text, the field value is stripped of all HTML before comparison.
        /// See <a href="json_InputType.html#reslink_textarea">InputType (textarea)</a>.
        /// </p>
        /// 
        /// <pre>
        ///  {"field_name": "description", "method_name": "equals", "value": "red alert"}
        ///  </pre>
        /// 
        /// The above evaluates to true if the rich text field named "description" has a
        /// value of "&lt;div>Red Alert&lt;/div>".
        /// </summary>
        [EnumMember(Value = "equals")]
        Equals,

        /// <summary>
        /// <pre>
        ///  {"field_name": "name", "method_name": "changed_to", "value": "some value"}
        ///  </pre>
        /// 
        /// The above evaluates to true if the "name" field has changed and now has a value of "some value".
        /// </summary>
        [EnumMember(Value = "changed_to")]
        ChangedTo,

        /// <summary>
        /// <pre>
        ///  {"field_name": "name", "method_name": "changed_from", "value": "some value"}
        ///  </pre>
        /// 
        /// The above evaluates to true if the "name" field has changed and was previously "some value"
        /// </summary>
        [EnumMember(Value = "changed_from")]
        ChangedFrom,

        /// <summary>
        /// <pre>
        ///  Example:  {"method_name": "object_removed"}
        ///  </pre>
        /// 
        /// The above evaluates to true if an object of the type selected in the action/notification has
        /// been removed.
        /// </summary>
        [EnumMember(Value = "object_removed")]
        ObjectRemoved,

        /// <summary>
        /// <pre>
        ///  Example:  {"method_name": "object_added"}
        ///  </pre>
        /// 
        /// The above evaluates to true if an object of the type selected in the action/notification has
        /// been added.  The field_name and value fields of the condition are ignored.
        /// </summary>
        [EnumMember(Value = "object_added")]
        ObjectAdded,

        /// <summary>
        /// <pre>
        ///  {"field_name": "hits", "method_name": "value_added"}
        ///  </pre>
        /// 
        /// The above condition evaluates to true if the "hits" collection had a value added (any value).
        /// </summary>
        [EnumMember(Value = "value_added")]
        ValueAdded,

        /// <summary>
        /// <pre>
        ///  {"field_name": "name", "method_name": "contains", "value": "red alert"}
        ///  </pre>
        /// 
        /// The above condition evaluates to true if the name field contains (case insensitive)
        /// the value "red alert".
        /// 
        /// You can also use contains for multiselect fields:
        /// 
        /// <pre>
        ///  {"field_name": "incident_type_ids", "method_name": "contains", "value": [19, 20]}
        ///  </pre>
        /// 
        /// The above condition evaluates to true if the incident_type_ids field contains both 19 (which is Malware)
        /// and 20 (which is System Intrusion).
        /// </summary>
        [EnumMember(Value = "contains")]
        Contains,

        /// <summary>
        /// <pre>
        ///  {"field_name": "due_date", "method_name": "due_within", "value": 5}
        ///  </pre>
        /// 
        /// The above evaluates to true if the object (task) due_date is within 5 days from the current date.
        /// </summary>
        [EnumMember(Value = "due_within")]
        DueWithin,

        /// <summary>
        /// <pre>
        ///  {"field_name": "due_date", "method_name": "overdue_by", "value": 5}
        ///  </pre>
        /// 
        /// The above evaluates to true if the object (task) due_date is overdue by 5 days or more.
        /// </summary>
        [EnumMember(Value = "overdue_by")]
        OverdueBy,

        /// <summary>
        /// <pre>
        ///  {"field_name": "custom_number_field", "method_name": "gt", "value": 5}
        ///  </pre>
        /// The above condition evaluates to true if the custom_number field is greater than 5.
        /// </summary>
        [EnumMember(Value = "gt")]
        Gt,

        /// <summary>
        /// <pre>
        ///  {"field_name": "custom_number_field", "method_name": "lt", "value": 5}
        ///  </pre>
        /// The above condition evaluates to true if the custom_number field is less than 5.
        /// </summary>
        [EnumMember(Value = "lt")]
        Lt,

        /// <summary>
        /// <pre>
        ///  {"field_name": "custom_number_field", "method_name": "gte", "value": 5}
        ///  </pre>
        /// The above condition evaluates to true if the custom_number field is greater than or equal to 5.
        /// </summary>
        [EnumMember(Value = "gte")]
        Gte,

        /// <summary>
        /// <pre>
        ///  {"field_name": "custom_number_field", "method_name": "lte", "value": 5}
        ///  </pre>
        /// The above condition evaluates to true if the custom_number field is less than or equal to 5.
        /// </summary>
        [EnumMember(Value = "lte")]
        Lte,

        /// <summary>
        /// <pre>
        ///  {"field_name": "members", "method_name": "contains_user"}
        ///  </pre>
        /// The above condition evaluates to true if the members collection contains the current user.
        /// </summary>
        [EnumMember(Value = "contains_user")]
        ContainsUser,

        /// <summary>
        /// <pre>
        ///  {"field_name": "exposure_type_id", "method_name": "in", "value": [5,6]}
        ///  </pre>
        /// The above condition evaluates to true if the exposure_type_id is either 5 or 6 (it's
        /// ID is either 5 or 6).
        /// </summary>
        [EnumMember(Value = "in")]
        In,

        /// <summary>
        /// 
        /// </summary>
        [EnumMember(Value = "value_removed")]
        ValueRemoved,

        /// <summary>
        /// <pre>
        ///  {"field_name": "exposure_type_id", "method_name": "not_in", "value": [5,6]}
        ///  </pre>
        /// The above condition evaluates to true if the exposure_type_id is not either 5 and it is not 6 (it's something
        /// other than 5 or 6).
        /// </summary>
        [EnumMember(Value = "not_in")]
        NotIn,

        /// <summary>
        /// <pre>
        ///  {"field_name": "name", "method_name": "not_equals", "value": "some value"}
        ///  </pre>
        /// 
        /// The above evaluates to true if the field named "name" has a value (case insensitive) other than "some value".
        /// This method also works for other type of fields (besides text).  For example, you can use
        /// it for select lists:
        /// 
        /// <pre>
        ///  {"field_name": "exposure_type_id", "method_name": "not_equals", "value": 5}
        ///  </pre>
        /// 
        /// The above evaluates to true if the field named "exposure_type_id" has a value with an ID other than 5.
        /// 
        /// <p>
        /// If the field is an "textarea" field configured for rich text, the field value is stripped of all HTML before comparison.
        /// See <a href="json_InputType.html#reslink_textarea">InputType (textarea)</a>.
        /// </p>
        /// 
        /// <pre>
        ///  {"field_name": "description", "method_name": "not_equals", "value": "red alert"}
        ///  </pre>
        /// 
        /// The above evaluates to false if the rich text field named "description" has a
        /// value of "&lt;div>Red Alert&lt;/div>" and true otherwise.
        /// </summary>
        [EnumMember(Value = "not_equals")]
        NotEquals,

        /// <summary>
        /// <pre>
        ///  {"field_name": "name", "method_name": "not_contains", "value": "red alert"}
        ///  </pre>
        /// 
        /// The above condition evaluates to false if the name field contains (case insensitive)
        /// a value of "red alert".
        /// 
        /// You can also use contains for multiselect fields:
        /// 
        /// <pre>
        ///  {"field_name": "incident_type_ids", "method_name": "not_contains", "value": [19, 20]}
        ///  </pre>
        /// 
        /// The above condition evaluates to true if the incident_type_ids field does not contain both 19 (which is Malware)
        /// and 20 (which is System Intrusion).
        /// </summary>
        [EnumMember(Value = "not_contains")]
        NotContains,

        /// <summary>
        /// <pre>
        ///  {"field_name": "members", "method_name": "not_contains_user"}
        ///  </pre>
        /// The above condition evaluates to true if the members collection does not contain the current user.
        /// </summary>
        [EnumMember(Value = "not_contains_user")]
        NotContainsUser,

        /// <summary>
        /// <pre>
        ///  {"field_name": "name", "method_name": "not_changed_to", "value": "some value"}
        ///  </pre>
        /// 
        /// Returns the inverse of the "changed_to" method name.
        /// </summary>
        [EnumMember(Value = "not_changed_to")]
        NotChangedTo,

        /// <summary>
        /// <pre>
        ///  {"field_name": "name", "method_name": "not_changed_from", "value": "some value"}
        ///  </pre>
        /// 
        /// Returns the inverse of the "changed_from" method name.
        /// </summary>
        [EnumMember(Value = "not_changed_from")]
        NotChangedFrom,

        /// <summary>
        /// 
        /// </summary>
        [EnumMember(Value = "has_a_value")]
        HasAValue,

        /// <summary>
        /// 
        /// </summary>
        [EnumMember(Value = "not_has_a_value")]
        NotHasAValue,

        /// <summary>
        /// 
        /// </summary>
        [EnumMember(Value = "includes_hierarchical")]
        IncludesHierarchical,

        /// <summary>
        /// 
        /// </summary>
        [EnumMember(Value = "not_includes_hierarchical")]
        NotIncludesHierarchical
    }
}
