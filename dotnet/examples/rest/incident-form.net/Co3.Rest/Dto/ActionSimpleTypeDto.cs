/*
 * Resilient Systems, Inc. ("Resilient") is willing to license software
 * or access to software to the company or entity that will be using or
 * accessing the software and documentation and that you represent as
 * an employee or authorized agent ("you" or "your") only on the condition
 * that you accept all of the terms of this license agreement.
 *
 * The software and documentation within Resilient's Development Kit are
 * copyrighted by and contain confidential information of Resilient. By
 * accessing and/or using this software and documentation, you agree that
 * while you may make derivative works of them, you:
 *
 * 1)  will not use the software and documentation or any derivative
 *     works for anything but your internal business purposes in
 *     conjunction your licensed used of Resilient's software, nor
 * 2)  provide or disclose the software and documentation or any
 *     derivative works to any third party.
 *
 * THIS SOFTWARE AND DOCUMENTATION IS PROVIDED "AS IS" AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL RESILIENT BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// <auto-generated>
// IBM Resilient REST API version 28.1
//
// Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
// </auto-generated>

using System;
using System.Collections.Generic;
using Newtonsoft.Json;

namespace Co3.Rest.Dto
{
    /// <summary>
    ///  Holds information about a type used in an ActionDataDTO object.  This is a significantly
    ///  simplified version of TypeDTO.  It contains only the type information likely to be needed
    ///  when processing actions.
    /// 
    ///  A note about implementation...Constructing the fields from the type and filter can be expensive due to database
    ///  calls to get field value information.  However most of the time that information is not used.  Therefore
    ///  the creation if the field/filter list is deferred until needed (when getFields() is called).  The constructor
    ///  just keeps track of the input information and then uses it during the getFields().
    /// 
    /// </summary>
    [JsonObject(MemberSerialization.OptIn)]
    public class ActionSimpleTypeDto 
    {
        /// <summary>
        /// A map of the fields.  The key is the name of the field (e.g. "incident_type_ids") and the value is
        /// the SimpleFieldDefDTO (which contains the values that are referenced in the object).
        /// </summary>
        [JsonProperty("fields")]
        public Dictionary<string, ActionSimpleFieldDefDto> Fields { get; set; }

        /// <summary>
        /// The internal ID of the type. This field is read-only.
        /// </summary>
        [JsonProperty("type_id")]
        public int TypeId { get; set; }
    }
}
