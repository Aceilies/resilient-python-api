# Resilient Library for Integrations

This package contains common library calls which facilitate the development of functions for IBM Resilient.

Modules included in this package include:

* function\_metrics - A class to collect metrics information to be added to a json payload. This is embedded in function_results.ResultPayload
* function_results - A class to standardize on the payload returned from functions.
* html2markdown - A class to convert html code to markdown. Parameters exist to define the conversion characters to use.
* integration_errors - Contains a simple exception for function failures: Integrations
* requests_common - A class of common code for making REST API calls with logic for proxies and standard return code handling.
* resilient_common - Common code for interacting with Resilient. Functions include:
      
      * build\_incident_url - Build a URL back to the issuing incident for 3rd party software reference
      * build\_resilient_url - Build a URL to access resilient. Useful for API calls
      * clean_html - Move html code from rich text fields. Data is concatenated together. Use html2markdown for better results.
      * unescape - Restore data which has been encoded for URL transmission (ex. \&gt;)
      * validate_fields - Ensure require fields from Resilient or the app.config file are present
      * get\_file_attachment - Return a byte string of a Resilient attachment related to an incident, task or artifact
      * readable_datetime - convert epoch formatted data and time value into a string
      * str\_to_bool - convert string values into boolean

Prerequisites:

```
resilient version 30 or later
resilient_circuits version 30 or later
```

Usage examples:

```
from resilient_lib.components.resilient_common build_incident_url, build_resilient_url

url_to_incident = build_incident_url(build_resilient_url("https://my.resilient.com", 8443), 12345)
self.assertEqual("https://my.resilient.com:8443/#incidents/12345", url_to_incident)
```

```
from resilient_lib.components.requests_common import RequestsCommon
from resilient_lib.components.function_result import ResultPayload

fr = ResultPayload(pgkname, **resilient_params)

req_common = RequestsCommon(app_config_params, function_params)
result = req_common.execute_call('post', issue_url, payload, log=log, basicauth=(function_params['user'], function_params['password']), verify_flag= function_params['verifyFlag'], headers=HTTP_HEADERS)

json_payload = fr.done(True, None, result)

```

```
from resilient_lib.components.html2markdown import MarkdownParser

data = "<div class='rte'><div><strong><u>underline and strong</u></strong></div></div>"
markdown = "*_underline and strong_*"

parser = MarkdownParser(bold="*", underline="_") # override defaults
converted = parser.convert(data)
self.assertEqual(converted, markdown)
```


